# docker-compose.yml

secrets:
  linode_dns_token:
    file: ./secrets/linode_dns_token.secret

services:

  traefik:
    image: "traefik:latest"
    container_name: "traefik"
    restart: "unless-stopped"
    command:
      # traefik general settings
      - "--log.level=DEBUG"
      - "--api=true"
      - "--api.dashboard=true"

      # provider(Docker) setup
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      
      # entrypoints
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      
      # TLS certificate setup with Let's Encrypt
      - "--certificatesresolvers.myresolver.acme.dnschallenge=true"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.provider=linode"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      - "--certificatesresolvers.myresolver.acme.dnschallenge.delaybeforecheck=60"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"  # comment this line out for production.
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

    secrets:
      - "linode_dns_token"

    environment:
      - "LINODE_TOKEN_FILE=/run/secrets/linode_dns_token"  # this directory is in the docker container with traefik

    ports:
      - "80:80"      # host_port : container_port -- the host_port cannot be below 1024 on MacOS.
      - "443:443"
      
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.traefik-dashboard-http.entrypoints=http
      - traefik.http.routers.traefik-dashboard-http.rule=Host(`${TRAEFIK_SERVER_NAME}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      # Use the traefik-public network (declared below)
      - traefik.docker.network=public
      # traefik-https the actual router using HTTPS
      - traefik.http.routers.traefik-dashboard-https.entrypoints=https
      - traefik.http.routers.traefik-dashboard-https.rule=Host(`${TRAEFIK_SERVER_NAME}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.traefik-dashboard-https.tls=true
      # Use the "le" (Let's Encrypt) resolver created below
      - traefik.http.routers.traefik-dashboard-https.tls.certresolver=myresolver
      # Use the special Traefik service api@internal with the web UI/Dashboard
      - traefik.http.routers.traefik-dashboard-https.service=api@internal
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # traefik-http set up only to use the middleware to redirect to https
      - traefik.http.routers.traefik-dashboard-http.middlewares=https-redirect
      # admin-auth middleware with HTTP Basic auth
      # Using the environment variables USERNAME and HASHED_PASSWORD (test:test)
      - traefik.http.middlewares.admin-auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/
      # Enable HTTP Basic auth, using the middleware created above
      - traefik.http.routers.traefik-dashboard-https.middlewares=admin-auth

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./letsencrypt:/letsencrypt"  # store the let's encrypt data on a bind mount volume
    
    networks:
      - api
      

  api:
    build:
      context: ./project/api
      dockerfile: Dockerfile

    command: [sh, -c, "uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port 80 --timeout-keep-alive 20"]

    container_name: "api"
 
    labels:
      # Enable Traefik for this service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.api.loadbalancer.server.port=80
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.api-http.entrypoints=http
      - traefik.http.routers.api-http.rule=Host(`${API_SERVER_NAME}`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=api
      # Make Traefik use this domain in HTTPS
      - traefik.http.routers.api-https.entrypoints=https
      - traefik.http.routers.api-https.rule=Host(`${API_SERVER_NAME}`)
      - traefik.http.routers.api-https.tls=true
      # Use the "myreslover" (Let's Encrypt) resolver
      - traefik.http.routers.api-https.tls.certresolver=myresolver
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middleware to redirect HTTP to HTTPS
      - traefik.http.routers.api-http.middlewares=https-redirect

    networks:
      - api

networks:
  api:
